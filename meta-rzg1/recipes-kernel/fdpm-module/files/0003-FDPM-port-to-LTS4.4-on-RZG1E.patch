From 21ca945b32264ed3ebdb8b05a660b7f2546da19d Mon Sep 17 00:00:00 2001
From: Chien Nguyen <chien.nguyen.eb@rvc.renesas.com>
Date: Thu, 25 Aug 2016 11:47:09 +0700
Subject: [PATCH] FDPM port to LTS4.4 on RZG1E

This patch file port FDPM from LTSI3.10 to LTS4.4 on RZ/G1E board
Fix error that can not remove mode of FDPM
Now, source code of FDPM can be used for RZ/G1E and RZ/G1M

Signed-off-by: Chien Nguyen <chien.nguyen.eb@rvc.renesas.com>
---
 drv/fdp/fdp_drv.c |  3 +--
 drv/fdpm_main.c   |  4 ++--
 drv/fdpm_sub.c    | 44 +++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 44 insertions(+), 7 deletions(-)

diff --git a/drv/fdp/fdp_drv.c b/drv/fdp/fdp_drv.c
index 537761a..35a16dd 100755
--- a/drv/fdp/fdp_drv.c
+++ b/drv/fdp/fdp_drv.c
@@ -425,7 +425,7 @@ long fdp_reg_inth(struct platform_device *pdev, int devno, T_FDPD_MEM *prv)
 	}
 	prv->irq = irq->start;
 	/* registory interrupt handler */
-	ercd = request_irq(prv->irq, fdp_ins_ih, IRQF_SHARED,dev_name(&pdev->dev), prv);
+	ercd = request_irq(prv->irq, fdp_ins_ih, IRQF_SHARED, dev_name(&pdev->dev), prv);
 	if (ercd) {
 		APRINT("[%s] request_irq failed!! ercd = %d irq=%d\n",
 		       __func__, ercd, prv->irq);
@@ -434,7 +434,6 @@ long fdp_reg_inth(struct platform_device *pdev, int devno, T_FDPD_MEM *prv)
 
 	DPRINT("done\n");
 	return 0;
-
 }
 
 long fdpm_free_inth(struct platform_device *pdev, int devno, T_FDPD_MEM *prv)
diff --git a/drv/fdpm_main.c b/drv/fdpm_main.c
index c22f9d3..a130dc4 100755
--- a/drv/fdpm_main.c
+++ b/drv/fdpm_main.c
@@ -374,7 +374,7 @@ static int fdpm_fdp_probe(struct platform_device *pdev)
 
 	DPRINT("This is module probe - START - %s %d\n",__func__,__LINE__);
 
-	if(p_fdpm_drvdata == NULL){
+	if (p_fdpm_drvdata == NULL) {
 		EPRINT("p_fdpm_drvdata is NULL\n");
 		return -ENOMEM;;
 
@@ -449,7 +449,7 @@ static int __init fdpm_module_init(void)
 
 	ret = misc_register(&fdpm_misc);
 
-	if (ret){
+	if (ret) {
 		APRINT("misc_register Fail");
 	}
 
diff --git a/drv/fdpm_sub.c b/drv/fdpm_sub.c
index f386a46..3eb2dee 100755
--- a/drv/fdpm_sub.c
+++ b/drv/fdpm_sub.c
@@ -144,7 +144,11 @@ int fdpm_init(struct fdpm_privdata *priv)
 	int                    ret_val;
 	struct fdpm_drvdata    *pdrv = priv->pdrv;
 	struct platform_device *pdev = pdrv->pdev;
+
+#if defined(M2CONFIG)
 	struct platform_device *pdev_c2 = pdrv->pdev_c2;
+#endif
+
 	int                    ercd;
 	long                   sub_ercd;
 
@@ -155,9 +159,11 @@ int fdpm_init(struct fdpm_privdata *priv)
 	pm_runtime_enable(&pdev->dev);
 	pm_runtime_get_sync(&pdev->dev);
 
+#if defined(M2CONFIG)
 	pm_suspend_ignore_children(&pdev_c2->dev, true);
 	pm_runtime_enable(&pdev_c2->dev);
 	pm_runtime_get_sync(&pdev_c2->dev);
+#endif
 
 	/* enable clock */
 	pdrv->fdpm_clk[0] = clk_get(NULL, "fdp1-0");
@@ -211,6 +217,7 @@ int fdpm_init(struct fdpm_privdata *priv)
 		goto exit;
 	}
 
+#if defined(M2CONFIG)
 	ret_val = fdpm_lib_driver_initialize(pdev_c2, priv, &sub_ercd);
 	if (ret_val != 0) {
 		APRINT("failed to fdpm_lib_driver_initialize %d (%ld)\n",
@@ -218,6 +225,7 @@ int fdpm_init(struct fdpm_privdata *priv)
 		ercd = -EFAULT;
 		goto exit;
 	}
+#endif
 
 	DPRINT("done\n");
 	return 0;
@@ -254,7 +262,12 @@ int fdpm_lib_driver_initialize(struct platform_device *pdev,
 		goto exit;
 	}
 
+#if defined(M2CONFIG)
 	for (i = 0; i < FDPM_FDP_NUM - 1; i++) {
+#endif
+#if defined(E2CONFIG)
+	for (i = 0; i < FDPM_FDP_NUM; i++) {
+#endif
 		ercd = fdp_ins_allocate_memory(&priv->FDP_obj[channel]);
 		if (ercd) {
 			if (sub_ercd != NULL)
@@ -288,7 +301,12 @@ int fdpm_lib_driver_initialize(struct platform_device *pdev,
 		}
 	}
 
+#if defined(M2CONFIG)
 	for (i = 0; i < FDPM_FDP_NUM - 1; i++) {
+#endif
+#if defined(E2CONFIG)
+	for (i = 0; i < FDPM_FDP_NUM; i++) {
+#endif
 		ercd = drv_FDP_Open(priv->FDP_obj[channel], sub_ercd);
 		if (ercd) {
 			if (sub_ercd != NULL)
@@ -297,8 +315,14 @@ int fdpm_lib_driver_initialize(struct platform_device *pdev,
 			goto exit;
 		}
 	}
+
+#if defined(M2CONFIG)
 	if (channel == 1)
 		fdpm_thread(priv);
+#endif
+#if defined(E2CONFIG)
+	fdpm_thread(priv);
+#endif
 	channel++;
 
 	NPRINT("%s\n", __func__);
@@ -330,7 +354,11 @@ int fdpm_quit(struct fdpm_privdata *priv)
 	int ret;
 	struct fdpm_drvdata    *pdrv = priv->pdrv;
 	struct platform_device *pdev = pdrv->pdev;
+
+#if defined(M2CONFIG)
 	struct platform_device *pdev_c2 = pdrv->pdev_c2;
+#endif
+
 	long                   wret;
 
 	DPRINT("called\n");
@@ -359,8 +387,10 @@ int fdpm_quit(struct fdpm_privdata *priv)
 	pm_runtime_put_sync(&pdev->dev);
 	pm_runtime_disable(&pdev->dev);
 
+#if defined(M2CONFIG)
 	pm_runtime_put_sync(&pdev_c2->dev);
 	pm_runtime_disable(&pdev_c2->dev);
+#endif
 
 	DPRINT("done\n");
 	return 0;
@@ -376,7 +406,10 @@ int fdpm_lib_driver_quit(struct fdpm_privdata *priv)
 	int i;
 	struct fdpm_drvdata    *pdrv = priv->pdrv;
 	struct platform_device *pdev = pdrv->pdev;
+
+#if defined(M2CONFIG)
 	struct platform_device *pdev_c2 = pdrv->pdev_c2;
+#endif
 
 	if (priv == NULL) {
 		ret = 0;
@@ -393,6 +426,14 @@ int fdpm_lib_driver_quit(struct fdpm_privdata *priv)
 		complete(&priv->post_thread[i].start2);
 		kthread_stop(priv->post_thread[i].th);
 
+		if (i == 0)
+			fdpm_free_inth(pdev, 0, priv->FDP_obj[i]);
+
+#if defined(M2CONFIG)
+		if (i == 1)
+			fdpm_free_inth(pdev_c2, 0, priv->FDP_obj[i]);
+#endif
+
 		ercd = drv_FDP_Quit(priv->FDP_obj[i]);
 		if (ercd) {
 			DPRINT("drv_FDP_Quit fail %d\n", ercd);
@@ -414,9 +455,6 @@ int fdpm_lib_driver_quit(struct fdpm_privdata *priv)
 		}
 		priv->FDP_obj[i] = NULL;
 	}
-
-	fdpm_free_inth(pdev, 0, priv->FDP_obj[0]);
-	fdpm_free_inth(pdev_c2, 0, priv->FDP_obj[1]);
 	sub_ercd = ercd;
 
 	DPRINT("done\n");
-- 
1.9.1

