commit 736a784a9d49290fc8ff83ee0b28e34042eb11bd
Author: khoahvd <khoahvd@fsoft.com.vn>
Date:   Thu Nov 24 14:50:48 2016 +0700

    Add configure in GPU for compatible with r8a7742-iwg21m_q7

diff --git a/drivers/gpu/drm/Kconfig b/drivers/gpu/drm/Kconfig
index b2434d9..b64e795 100644
--- a/drivers/gpu/drm/Kconfig
+++ b/drivers/gpu/drm/Kconfig
@@ -171,6 +171,11 @@ config DRM_FBDEV_CRTC
 	  If you want to use FBDev every CRTC, you select y.
 	  If you want to not use FBDev every CRTC, you select n.
 
+config LVDS_Q7
+       tristate "iWave Qseven LVDS control"
+       help
+         Say yes here to control the Qseven LVDS backlight and power control in iW-RainboW-G21 platform.
+
 source "drivers/gpu/drm/exynos/Kconfig"
 
 source "drivers/gpu/drm/vmwgfx/Kconfig"
diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index 85728c0..f9777a2 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -56,3 +56,4 @@ obj-$(CONFIG_DRM_TILCDC)	+= tilcdc/
 obj-$(CONFIG_DRM_QXL) += qxl/
 obj-y			+= i2c/
 obj-$(CONFIG_DRM_RCAR_DU) += rcar-du/
+obj-$(CONFIG_LVDS_Q7) += lvds_qseven.o
diff --git a/drivers/gpu/drm/i2c/Kconfig b/drivers/gpu/drm/i2c/Kconfig
index 3edb45a..80f8074 100644
--- a/drivers/gpu/drm/i2c/Kconfig
+++ b/drivers/gpu/drm/i2c/Kconfig
@@ -44,4 +44,9 @@ config DRM_ADV7511_DVI_OUTPUT
 	  If you want to use DVI mode, you select y.
 	  If you want to use HDMI mode, you select n.
 
+config DRM_I2C_CH7036
+	tristate "Chrontel ch7036 LVDS to HDMI converter"
+	help
+	  Support for Chrontel ch7036 and similar TV encoders, found
+	  on some nVidia video cards.
 endmenu
diff --git a/drivers/gpu/drm/i2c/Makefile b/drivers/gpu/drm/i2c/Makefile
index ffa2540..606b9d3 100644
--- a/drivers/gpu/drm/i2c/Makefile
+++ b/drivers/gpu/drm/i2c/Makefile
@@ -11,3 +11,6 @@ obj-$(CONFIG_DRM_I2C_NXP_TDA998X) += tda998x.o
 
 adv7511-y := adv7511_core.o
 obj-$(CONFIG_DRM_ADV7511) += adv7511.o
+
+ch7036-y := ch7036_drv.o
+obj-$(CONFIG_DRM_I2C_CH7036) += ch7036.o
diff --git a/drivers/gpu/drm/i2c/adv7511_core.c b/drivers/gpu/drm/i2c/adv7511_core.c
index 800b07f..ab59797 100644
--- a/drivers/gpu/drm/i2c/adv7511_core.c
+++ b/drivers/gpu/drm/i2c/adv7511_core.c
@@ -29,6 +29,10 @@
 #define EDID_DELAY		(250) /* ms */
 #define HPD_DELAY		(100) /* ms */
 
+#ifdef  CONFIG_MACH_IWG21M
+int is_adv_connected = 0;
+#endif
+
 static const uint8_t adv7511_register_defaults[] = {
 	0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 00 */
 	0x00, 0x00, 0x01, 0x0e, 0xbc, 0x18, 0x01, 0x13,
@@ -940,6 +944,9 @@ static int adv7511_probe(struct i2c_client *i2c,
 	struct adv7511_link_config link_config;
 	struct adv7511 *adv7511;
 	unsigned int val;
+#ifdef  CONFIG_MACH_IWG21M
+	unsigned int chip;
+#endif
 	int ret;
 #if defined(CONFIG_DRM_RCAR_DU) || defined(CONFIG_DRM_RCAR_DU_MODULE)
 	unsigned int timeout;
@@ -996,6 +1003,22 @@ static int adv7511_probe(struct i2c_client *i2c,
 		return ret;
 	dev_dbg(&i2c->dev, "Rev. %d\n", val);
 
+#ifdef  CONFIG_MACH_IWG21M
+	regmap_read(adv7511->regmap, ADV7511_REG_CHIP_ID_HIGH, &val);
+	chip = val << 8;
+	regmap_read(adv7511->regmap, ADV7511_REG_CHIP_ID_LOW, &val);
+	chip |= val;
+	if(chip == 0x7511)
+	{
+		is_adv_connected =1;
+	}
+	else
+	{
+		is_adv_connected =0;
+		return -ENODEV;
+	}
+#endif
+
 	ret = regmap_register_patch(adv7511->regmap, adv7511_fixed_registers,
 		ARRAY_SIZE(adv7511_fixed_registers));
 	if (ret)
diff --git a/drivers/gpu/drm/i2c/ch7036_drv.c b/drivers/gpu/drm/i2c/ch7036_drv.c
new file mode 100644
index 0000000..4d2f33a
--- /dev/null
+++ b/drivers/gpu/drm/i2c/ch7036_drv.c
@@ -0,0 +1,790 @@
+/*
+ * Copyright (C) 2009 Francisco Jerez.
+ * All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+
+struct regval_list {
+	u8 reg_num;
+	u8 value;
+};
+
+static const struct regval_list pwr_vals[] = {
+	/*Page 0 (0x03 = 0x00) */
+	{ 0x03, 0x00 },
+	{ 0x00, 0x56 },
+	{ 0x01, 0xF1 },
+	{ 0x02, 0xF3 },
+	{ 0x03, 0x00 },
+	{ 0x04, 0x36 },
+	{ 0x05, 0x58 },
+	{ 0x06, 0xAC },
+	{ 0x07, 0xD0 },
+	{ 0x08, 0x0F },
+	{ 0x09, 0x02 },
+	{ 0x0A, 0x04 },
+	{ 0x0B, 0x2C },
+	{ 0x0C, 0x00 },
+	{ 0x0D, 0x40 },
+	{ 0x0E, 0x00 },
+	{ 0x0F, 0x18 },
+	{ 0x10, 0x88 },
+	{ 0x11, 0x1B },
+	{ 0x12, 0x00 },
+	{ 0x13, 0x26 },
+	{ 0x14, 0x00 },
+	{ 0x15, 0x03 },
+	{ 0x16, 0x06 },
+	{ 0x17, 0x00 },
+	{ 0x18, 0x00 },
+	{ 0x19, 0x88 },
+	{ 0x1A, 0x00 },
+	{ 0x1B, 0x00 },
+	{ 0x1C, 0x69 },
+	{ 0x1D, 0x78 },
+	{ 0x1E, 0x00 },
+	{ 0x1F, 0x47 },
+	{ 0x20, 0x80 },
+	{ 0x21, 0x98 },
+	{ 0x22, 0x00 },
+	{ 0x23, 0x10 },
+	{ 0x24, 0x60 },
+	{ 0x25, 0x24 },
+	{ 0x26, 0x38 },
+	{ 0x27, 0x65 },
+	{ 0x28, 0x00 },
+	{ 0x29, 0x0A },
+	{ 0x2A, 0x02 },
+	{ 0x2B, 0x08 },
+	{ 0x2C, 0x00 },
+	{ 0x2D, 0x00 },
+	{ 0x2E, 0x3F },
+	{ 0x2F, 0x00 },
+	{ 0x30, 0x01 },
+	{ 0x31, 0x01 },
+	{ 0x32, 0xC0 },
+	{ 0x33, 0x01 },
+	{ 0x34, 0x01 },
+	{ 0x35, 0x80 },
+	{ 0x36, 0x40 },
+	{ 0x37, 0x40 },
+	{ 0x38, 0x47 },
+	{ 0x39, 0x88 },
+	{ 0x3A, 0x00 },
+	{ 0x3B, 0x00 },
+	{ 0x3C, 0x00 },
+	{ 0x3D, 0x8A },
+	{ 0x3E, 0x00 },
+	{ 0x3F, 0x11 },
+	{ 0x40, 0x10 },
+	{ 0x41, 0x00 },
+	{ 0x42, 0x00 },
+	{ 0x43, 0x00 },
+	{ 0x44, 0x00 },
+	{ 0x45, 0x00 },
+	{ 0x46, 0x00 },
+	{ 0x47, 0x00 },
+	{ 0x48, 0x00 },
+	{ 0x49, 0x00 },
+	{ 0x4A, 0x00 },
+	{ 0x4B, 0x40 },
+	{ 0x4C, 0x40 },
+	{ 0x4D, 0x80 },
+	{ 0x4E, 0x00 },
+	{ 0x4F, 0x00 },
+	{ 0x50, 0x00 },
+	{ 0x51, 0x1F },
+	{ 0x52, 0xFF },
+	{ 0x53, 0x00 },
+	{ 0x54, 0x80 },
+	{ 0x55, 0x58 },
+	{ 0x56, 0x2C },
+	{ 0x57, 0x00 },
+	{ 0x58, 0x04 },
+	{ 0x59, 0x05 },
+	{ 0x5A, 0x08 },
+	{ 0x5B, 0x00 },
+	{ 0x5C, 0x00 },
+	{ 0x5D, 0x00 },
+	{ 0x5E, 0x54 },
+	{ 0x5F, 0x00 },
+	{ 0x60, 0x00 },
+	{ 0x61, 0x00 },
+	{ 0x62, 0x00 },
+	{ 0x63, 0x01 },
+	{ 0x64, 0x20 },
+	{ 0x65, 0x90 },
+	{ 0x66, 0x20 },
+	{ 0x67, 0x22 },
+	{ 0x68, 0x46 },
+	{ 0x69, 0x24 },
+	{ 0x6A, 0x40 },
+	{ 0x6B, 0x60 },
+	{ 0x6C, 0x10 },
+	{ 0x6D, 0x00 },
+	{ 0x6E, 0xA8 },
+	{ 0x6F, 0x4B },
+	{ 0x70, 0x98 },
+	{ 0x71, 0x01 },
+	{ 0x72, 0x00 },
+	{ 0x73, 0x00 },
+	{ 0x74, 0x20 },
+	{ 0x75, 0x80 },
+	{ 0x76, 0x18 },
+	{ 0x77, 0x00 },
+	{ 0x78, 0x00 },
+	{ 0x79, 0x01 },
+	{ 0x7A, 0x00 },
+	{ 0x7B, 0x00 },
+	{ 0x7C, 0x00 },
+	{ 0x7D, 0xFF },
+	{ 0x7E, 0x0F },
+	{ 0x7F, 0x00 },
+
+	/* Page 1 (0x03 = 0x01): */
+	{ 0x03, 0x01 },
+	{ 0x00, 0x56 },
+	{ 0x01, 0xF1 },
+	{ 0x02, 0xF3 },
+	{ 0x03, 0x01 },
+	{ 0x04, 0x36 },
+	{ 0x05, 0x58 },
+	{ 0x06, 0xAC },
+	{ 0x07, 0x26 },
+	{ 0x08, 0x00 },
+	{ 0x09, 0x4B },
+	{ 0x0A, 0x00 },
+	{ 0x0B, 0x6D },
+	{ 0x0C, 0x74 },
+	{ 0x0D, 0x51 },
+	{ 0x0E, 0x13 },
+	{ 0x0F, 0x1C },
+	{ 0x10, 0x00 },
+	{ 0x11, 0x08 },
+	{ 0x12, 0xD6 },
+	{ 0x13, 0x28 },
+	{ 0x14, 0x91 },
+	{ 0x15, 0x68 },
+	{ 0x16, 0x20 },
+	{ 0x17, 0x0E },
+	{ 0x18, 0xC8 },
+	{ 0x19, 0x42 },
+	{ 0x1A, 0x7C },
+	{ 0x1B, 0x00 },
+	{ 0x1C, 0x00 },
+	{ 0x1D, 0x00 },
+	{ 0x1E, 0x00 },
+	{ 0x1F, 0x00 },
+	{ 0x20, 0x00 },
+	{ 0x21, 0x10 },
+	{ 0x22, 0x07 },
+	{ 0x23, 0x24 },
+	{ 0x24, 0xB6 },
+	{ 0x25, 0x10 },
+	{ 0x26, 0x00 },
+	{ 0x27, 0x00 },
+	{ 0x28, 0x54 },
+	{ 0x29, 0x60 },
+	{ 0x2A, 0x00 },
+	{ 0x2B, 0x00 },
+	{ 0x2C, 0x00 },
+	{ 0x2D, 0x00 },
+	{ 0x2E, 0x00 },
+	{ 0x2F, 0x00 },
+	{ 0x30, 0x00 },
+	{ 0x31, 0x00 },
+	{ 0x32, 0x00 },
+	{ 0x33, 0x00 },
+	{ 0x34, 0x00 },
+	{ 0x35, 0x00 },
+	{ 0x36, 0x00 },
+	{ 0x37, 0x00 },
+	{ 0x38, 0x00 },
+	{ 0x39, 0x00 },
+	{ 0x3A, 0x00 },
+	{ 0x3B, 0x0B },
+	{ 0x3C, 0x00 },
+	{ 0x3D, 0x00 },
+	{ 0x3E, 0x00 },
+	{ 0x3F, 0x00 },
+	{ 0x40, 0x08 },
+	{ 0x41, 0x00 },
+	{ 0x42, 0x14 },
+	{ 0x43, 0x20 },
+	{ 0x44, 0x00 },
+	{ 0x45, 0x00 },
+	{ 0x46, 0x20 },
+	{ 0x47, 0x00 },
+	{ 0x48, 0x49 },
+	{ 0x49, 0x10 },
+	{ 0x4A, 0xFF },
+	{ 0x4B, 0xFF },
+	{ 0x4C, 0xFF },
+	{ 0x4D, 0x00 },
+	{ 0x4E, 0x08 },
+	{ 0x4F, 0x00 },
+	{ 0x50, 0x00 },
+	{ 0x51, 0x00 },
+	{ 0x52, 0x00 },
+	{ 0x53, 0x00 },
+	{ 0x54, 0x00 },
+	{ 0x55, 0xA0 },
+	{ 0x56, 0x00 },
+	{ 0x57, 0x00 },
+	{ 0x58, 0x00 },
+	{ 0x59, 0x00 },
+	{ 0x5A, 0x00 },
+	{ 0x5B, 0x7A },
+	{ 0x5C, 0x5E },
+	{ 0x5D, 0x6E },
+	{ 0x5E, 0x1F },
+	{ 0x5F, 0x1F },
+	{ 0x60, 0x00 },
+	{ 0x61, 0x00 },
+	{ 0x62, 0x00 },
+	{ 0x63, 0x20 },
+	{ 0x64, 0x40 },
+	{ 0x65, 0x40 },
+	{ 0x66, 0x40 },
+	{ 0x67, 0x00 },
+	{ 0x68, 0x00 },
+	{ 0x69, 0x00 },
+	{ 0x6A, 0x00 },
+	{ 0x6B, 0xFF },
+	{ 0x6C, 0xFF },
+	{ 0x6D, 0xFF },
+	{ 0x6E, 0xFF },
+	{ 0x6F, 0x50 },
+	{ 0x70, 0x00 },
+	{ 0x71, 0x00 },
+	{ 0x72, 0x09 },
+	{ 0x73, 0x00 },
+	{ 0x74, 0x00 },
+	{ 0x75, 0x70 },
+	{ 0x76, 0x00 },
+	{ 0x77, 0x50 },
+	{ 0x78, 0x00 },
+	{ 0x79, 0x98 },
+	{ 0x7A, 0x00 },
+	{ 0x7B, 0x98 },
+	{ 0x7C, 0xFF },
+	{ 0x7D, 0x00 },
+	{ 0x7E, 0x00 },
+	{ 0x7F, 0x80 },
+
+	/*Page 2 (0x03 = 0x02): */
+	{ 0x03, 0x02 },
+	{ 0x00, 0x56 },
+	{ 0x01, 0xF1 },
+	{ 0x02, 0xF3 },
+	{ 0x03, 0xFF },
+	{ 0x04, 0x36 },
+	{ 0x05, 0x58 },
+	{ 0x06, 0xAC },
+	{ 0x07, 0xFF },
+	{ 0x08, 0xFF },
+	{ 0x09, 0xFF },
+	{ 0x0A, 0xFF },
+	{ 0x0B, 0xFF },
+	{ 0x0C, 0xFF },
+	{ 0x0D, 0xFF },
+	{ 0x0E, 0xFF },
+	{ 0x0F, 0xFF },
+	{ 0x10, 0xFF },
+	{ 0x11, 0xFF },
+	{ 0x12, 0xFF },
+	{ 0x13, 0xFF },
+	{ 0x14, 0xFF },
+	{ 0x15, 0xFF },
+	{ 0x16, 0xFF },
+	{ 0x17, 0xFF },
+	{ 0x18, 0xFF },
+	{ 0x19, 0xFF },
+	{ 0x1A, 0xFF },
+	{ 0x1B, 0xFF },
+	{ 0x1C, 0xFF },
+	{ 0x1D, 0xFF },
+	{ 0x1E, 0xFF },
+	{ 0x1F, 0xFF },
+	{ 0x20, 0xFF },
+	{ 0x21, 0xFF },
+	{ 0x22, 0xFF },
+	{ 0x23, 0xFF },
+	{ 0x24, 0xFF },
+	{ 0x25, 0xFF },
+	{ 0x26, 0xFF },
+	{ 0x27, 0xFF },
+	{ 0x28, 0xFF },
+	{ 0x29, 0xFF },
+	{ 0x2A, 0xFF },
+	{ 0x2B, 0xFF },
+	{ 0x2C, 0xFF },
+	{ 0x2D, 0xFF },
+	{ 0x2E, 0xFF },
+	{ 0x2F, 0xFF },
+	{ 0x30, 0xFF },
+	{ 0x31, 0xFF },
+	{ 0x32, 0xFF },
+	{ 0x33, 0xFF },
+	{ 0x34, 0xFF },
+	{ 0x35, 0xFF },
+	{ 0x36, 0xFF },
+	{ 0x37, 0xFF },
+	{ 0x38, 0xFF },
+	{ 0x39, 0xFF },
+	{ 0x3A, 0xFF },
+	{ 0x3B, 0xFF },
+	{ 0x3C, 0xFF },
+	{ 0x3D, 0xFF },
+	{ 0x3E, 0xFF },
+	{ 0x3F, 0xFF },
+	{ 0x40, 0xFF },
+	{ 0x41, 0xFF },
+	{ 0x42, 0xFF },
+	{ 0x43, 0xFF },
+	{ 0x44, 0xFF },
+	{ 0x45, 0xFF },
+	{ 0x46, 0xFF },
+	{ 0x47, 0xFF },
+	{ 0x48, 0xFF },
+	{ 0x49, 0xFF },
+	{ 0x4A, 0xFF },
+	{ 0x4B, 0xFF },
+	{ 0x4C, 0xFF },
+	{ 0x4D, 0xFF },
+	{ 0x4E, 0xFF },
+	{ 0x4F, 0xFF },
+	{ 0x50, 0xFF },
+	{ 0x51, 0xFF },
+	{ 0x52, 0xFF },
+	{ 0x53, 0xFF },
+	{ 0x54, 0xFF },
+	{ 0x55, 0xFF },
+	{ 0x56, 0xFF },
+	{ 0x57, 0xFF },
+	{ 0x58, 0xFF },
+	{ 0x59, 0xFF },
+	{ 0x5A, 0xFF },
+	{ 0x5B, 0xFF },
+	{ 0x5C, 0xFF },
+	{ 0x5D, 0xFF },
+	{ 0x5E, 0xFF },
+	{ 0x5F, 0xFF },
+	{ 0x60, 0xFF },
+	{ 0x61, 0xFF },
+	{ 0x62, 0xFF },
+	{ 0x63, 0xFF },
+	{ 0x64, 0xFF },
+	{ 0x65, 0xFF },
+	{ 0x66, 0xFF },
+	{ 0x67, 0xFF },
+	{ 0x68, 0xFF },
+	{ 0x69, 0xFF },
+	{ 0x6A, 0xFF },
+	{ 0x6B, 0xFF },
+	{ 0x6C, 0xFF },
+	{ 0x6D, 0xFF },
+	{ 0x6E, 0xFF },
+	{ 0x6F, 0xFF },
+	{ 0x70, 0xFF },
+	{ 0x71, 0xFF },
+	{ 0x72, 0xFF },
+	{ 0x73, 0xFF },
+	{ 0x74, 0xFF },
+	{ 0x75, 0xFF },
+	{ 0x76, 0xFF },
+	{ 0x77, 0xFF },
+	{ 0x78, 0xFF },
+	{ 0x79, 0xFF },
+	{ 0x7A, 0xFF },
+	{ 0x7B, 0xFF },
+	{ 0x7C, 0xFF },
+	{ 0x7D, 0xFF },
+	{ 0x7E, 0xFF },
+	{ 0x7F, 0xFF },
+
+	/* Page 3 {0x03 , 0x03}, */
+	{ 0x03, 0x03 },
+	{ 0x00, 0x56 },
+	{ 0x01, 0xF1 },
+	{ 0x02, 0xF3 },
+	{ 0x03, 0x03 },
+	{ 0x04, 0x36 },
+	{ 0x05, 0x58 },
+	{ 0x06, 0xAC },
+	{ 0x07, 0x00 },
+	{ 0x08, 0x00 },
+	{ 0x09, 0x00 },
+	{ 0x0A, 0x00 },
+	{ 0x0B, 0x00 },
+	{ 0x0C, 0xFF },
+	{ 0x0D, 0x00 },
+	{ 0x0E, 0x03 },
+	{ 0x0F, 0x19 },
+	{ 0x10, 0x40 },
+	{ 0x11, 0x01 },
+	{ 0x12, 0x00 },
+	{ 0x13, 0x00 },
+	{ 0x14, 0x00 },
+	{ 0x15, 0x00 },
+	{ 0x16, 0x00 },
+	{ 0x17, 0x00 },
+	{ 0x18, 0x00 },
+	{ 0x19, 0x00 },
+	{ 0x1A, 0x00 },
+	{ 0x1B, 0x00 },
+	{ 0x1C, 0x00 },
+	{ 0x1D, 0x00 },
+	{ 0x1E, 0x00 },
+	{ 0x1F, 0x00 },
+	{ 0x20, 0x00 },
+	{ 0x21, 0x00 },
+	{ 0x22, 0x42 },
+	{ 0x23, 0x1D },
+	{ 0x24, 0x8A },
+	{ 0x25, 0x11 },
+	{ 0x26, 0xFF },
+	{ 0x27, 0xFF },
+	{ 0x28, 0xFF },
+	{ 0x29, 0xFF },
+	{ 0x2A, 0xFF },
+	{ 0x2B, 0xFF },
+	{ 0x2C, 0xFF },
+	{ 0x2D, 0xFF },
+	{ 0x2E, 0xFF },
+	{ 0x2F, 0xFF },
+	{ 0x30, 0xFF },
+	{ 0x31, 0xFF },
+	{ 0x32, 0xFF },
+	{ 0x33, 0xFF },
+	{ 0x34, 0xFF },
+	{ 0x35, 0xFF },
+	{ 0x36, 0xFF },
+	{ 0x37, 0xFF },
+	{ 0x38, 0xFF },
+	{ 0x39, 0xFF },
+	{ 0x3A, 0xFF },
+	{ 0x3B, 0xFF },
+	{ 0x3C, 0xFF },
+	{ 0x3D, 0xFF },
+	{ 0x3E, 0xFF },
+	{ 0x3F, 0xFF },
+	{ 0x40, 0xFF },
+	{ 0x41, 0x09 },
+	{ 0x42, 0x1D },
+	{ 0x43, 0x0F },
+	{ 0x44, 0x00 },
+	{ 0x45, 0xFF },
+	{ 0x46, 0xFF },
+	{ 0x47, 0xFF },
+	{ 0x48, 0xFF },
+	{ 0x49, 0xFF },
+	{ 0x4A, 0xFF },
+	{ 0x4B, 0xFF },
+	{ 0x4C, 0xFF },
+	{ 0x4D, 0xFF },
+	{ 0x4E, 0xFF },
+	{ 0x4F, 0xFF },
+	{ 0x50, 0xFF },
+	{ 0x51, 0xFF },
+	{ 0x52, 0xFF },
+	{ 0x53, 0xFF },
+	{ 0x54, 0xFF },
+	{ 0x55, 0xFF },
+	{ 0x56, 0xFF },
+	{ 0x57, 0xFF },
+	{ 0x58, 0xFF },
+	{ 0x59, 0xFF },
+	{ 0x5A, 0xFF },
+	{ 0x5B, 0xFF },
+	{ 0x5C, 0xFF },
+	{ 0x5D, 0xFF },
+	{ 0x5E, 0xFF },
+	{ 0x5F, 0xFF },
+	{ 0x60, 0xFF },
+	{ 0x61, 0xFF },
+	{ 0x62, 0xFF },
+	{ 0x63, 0xFF },
+	{ 0x64, 0xFF },
+	{ 0x65, 0xFF },
+	{ 0x66, 0xFF },
+	{ 0x67, 0xFF },
+	{ 0x68, 0xFF },
+	{ 0x69, 0xFF },
+	{ 0x6A, 0xFF },
+	{ 0x6B, 0xFF },
+	{ 0x6C, 0xFF },
+	{ 0x6D, 0xFF },
+	{ 0x6E, 0x00 },
+	{ 0x6F, 0x00 },
+	{ 0x70, 0xFF },
+	{ 0x71, 0xF8 },
+	{ 0x72, 0xFF },
+	{ 0x73, 0x00 },
+	{ 0x74, 0x02 },
+	{ 0x75, 0xFF },
+	{ 0x76, 0x00 },
+	{ 0x77, 0x00 },
+	{ 0x78, 0x00 },
+	{ 0x79, 0xFF },
+	{ 0x7A, 0xFF },
+	{ 0x7B, 0xFF },
+	{ 0x7C, 0xFF },
+	{ 0x7D, 0xFF },
+	{ 0x7E, 0xFF },
+	{ 0x7F, 0xFF },
+
+	/*Page 4 (0x03 = 0x04): */
+	{ 0x03, 0x04 },
+	{ 0x00, 0x56 },
+	{ 0x01, 0xF1 },
+	{ 0x02, 0xF3 },
+	{ 0x03, 0x04 },
+	{ 0x04, 0x36 },
+	{ 0x05, 0x58 },
+	{ 0x06, 0xAC },
+	{ 0x07, 0xFF },
+	{ 0x08, 0x00 },
+	{ 0x09, 0x00 },
+	{ 0x0A, 0x00 },
+	{ 0x0B, 0x00 },
+	{ 0x0C, 0x00 },
+	{ 0x0D, 0x00 },
+	{ 0x0E, 0x00 },
+	{ 0x0F, 0x28 },
+	{ 0x10, 0x44 },
+	{ 0x11, 0x14 },
+	{ 0x12, 0x88 },
+	{ 0x13, 0x70 },
+	{ 0x14, 0xFD },
+	{ 0x15, 0xE8 },
+	{ 0x16, 0x00 },
+	{ 0x17, 0x00 },
+	{ 0x18, 0xFF },
+	{ 0x19, 0xFF },
+	{ 0x1A, 0xFF },
+	{ 0x1B, 0xFF },
+	{ 0x1C, 0xFF },
+	{ 0x1D, 0xFF },
+	{ 0x1E, 0xFF },
+	{ 0x1F, 0xFF },
+	{ 0x20, 0xFF },
+	{ 0x21, 0xFF },
+	{ 0x22, 0xFF },
+	{ 0x23, 0xFF },
+	{ 0x24, 0xFF },
+	{ 0x25, 0xFF },
+	{ 0x26, 0xFF },
+	{ 0x27, 0xFF },
+	{ 0x28, 0x00 },
+	{ 0x29, 0x00 },
+	{ 0x2A, 0x7F },
+	{ 0x2B, 0x07 },
+	{ 0x2C, 0xEF },
+	{ 0x2D, 0x07 },
+	{ 0x2E, 0x5F },
+	{ 0x2F, 0x07 },
+	{ 0x30, 0x86 },
+	{ 0x31, 0x07 },
+	{ 0x32, 0x80 },
+	{ 0x33, 0x00 },
+	{ 0x34, 0x80 },
+	{ 0x35, 0x00 },
+	{ 0x36, 0x08 },
+	{ 0x37, 0x87 },
+	{ 0x38, 0x89 },
+	{ 0x39, 0x0B },
+	{ 0x3A, 0x5F },
+	{ 0x3B, 0x9D },
+	{ 0x3C, 0x10 },
+	{ 0x3D, 0x00 },
+	{ 0x3E, 0x00 },
+	{ 0x3F, 0x00 },
+	{ 0x40, 0x00 },
+	{ 0x41, 0xFF },
+	{ 0x42, 0xFF },
+	{ 0x43, 0xFF },
+	{ 0x44, 0xFF },
+	{ 0x45, 0x00 },
+	{ 0x46, 0x03 },
+	{ 0x47, 0x00 },
+	{ 0x48, 0x00 },
+	{ 0x49, 0x00 },
+	{ 0x4A, 0x24 },
+	{ 0x4B, 0x00 },
+	{ 0x4C, 0x48 },
+	{ 0x4D, 0xFF },
+	{ 0x4E, 0xFF },
+	{ 0x4F, 0x7F },
+	{ 0x50, 0x56 },
+	{ 0x51, 0x81 },
+	{ 0x52, 0x2F },
+	{ 0x53, 0x00 },
+	{ 0x54, 0xC4 },
+	{ 0x55, 0x5A },
+	{ 0x56, 0x6F },
+	{ 0x57, 0x02 },
+	{ 0x58, 0x20 },
+	{ 0x59, 0x80 },
+	{ 0x5A, 0x04 },
+	{ 0x5B, 0x00 },
+	{ 0x5C, 0x80 },
+	{ 0x5D, 0x00 },
+	{ 0x5E, 0x05 },
+	{ 0x5F, 0x38 },
+	{ 0x60, 0x01 },
+	{ 0x61, 0x83 },
+	{ 0x62, 0x11 },
+	{ 0x63, 0x01 },
+	{ 0x64, 0x80 },
+	{ 0x65, 0x90 },
+	{ 0x66, 0x06 },
+	{ 0x67, 0xC0 },
+	{ 0x68, 0x4A },
+	{ 0x69, 0xBC },
+	{ 0x6A, 0x00 },
+	{ 0x6B, 0x00 },
+	{ 0x6C, 0x00 },
+	{ 0x6D, 0x00 },
+	{ 0x6E, 0x89 },
+	{ 0x6F, 0x10 },
+	{ 0x70, 0xAC },
+	{ 0x71, 0x00 },
+	{ 0x72, 0xE0 },
+	{ 0x73, 0x80 },
+	{ 0x74, 0x80 },
+	{ 0x75, 0x19 },
+	{ 0x76, 0x7D },
+	{ 0x77, 0x00 },
+	{ 0x78, 0xFF },
+	{ 0x79, 0xFF },
+	{ 0x7A, 0xFF },
+	{ 0x7B, 0xFF },
+	{ 0x7C, 0xFF },
+	{ 0x7D, 0xFF },
+	{ 0x7E, 0x80 },
+	{ 0x7F, 0x4C },
+	{ 0xff, 0xff },
+};
+
+/* Some helper macros */
+#define ch7036_info(client, format, ...) \
+	dev_info(&client->dev, format, __VA_ARGS__)
+#define ch7036_err(client, format, ...) \
+	dev_err(&client->dev, format, __VA_ARGS__)
+
+/* HW access functions */
+void ch7036_write(struct i2c_client *client, uint8_t addr, uint8_t val)
+{
+	uint8_t buf[] = {addr, val};
+	int ret;
+
+	ret = i2c_master_send(client, buf, ARRAY_SIZE(buf));
+	if (ret < 0)
+		ch7036_err(client, "Error %d writing to subaddress 0x%x\n",
+				ret, addr);
+}
+
+uint8_t ch7036_read(struct i2c_client *client, uint8_t addr)
+{
+	uint8_t val;
+	int ret;
+
+	ret = i2c_master_send(client, &addr, sizeof(addr));
+	if (ret < 0)
+		goto fail;
+
+	ret = i2c_master_recv(client, &val, sizeof(val));
+	if (ret < 0)
+		goto fail;
+
+	return val;
+
+fail:
+	ch7036_err(client, "Error %d reading from subaddress 0x%x\n",
+			ret, addr);
+	return 0;
+}
+
+/* I2C driver functions */
+
+static int ch7036_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	const struct regval_list *reg_def = pwr_vals;
+	int dev_id;
+
+	ch7036_write(client, 0x3, 0x4);
+	dev_id = ch7036_read(client, 0x50);
+	ch7036_info(client, "ch7036 is probed. The device ID is 0x%x\n",dev_id);
+
+	if (dev_id != 0x56)
+		return -ENODEV;
+
+	for (;reg_def->reg_num != 0xff;){
+		ch7036_write (client, reg_def->reg_num , reg_def->value);
+		reg_def++;
+	}
+
+	return 0;
+}
+
+static int ch7036_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+static int ch7036_resume(struct device *dev)
+{
+	return 0;
+}
+
+static struct i2c_device_id ch7036_ids[] = {
+	{ "ch7036", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, ch7036_ids);
+
+static const struct dev_pm_ops ch7036_pm_ops = {
+	.resume = ch7036_resume,
+};
+
+/* Module initialization */
+static struct i2c_driver ch7036_driver = {
+	.driver = {
+		.name   = "ch7036",
+		.owner  = THIS_MODULE,
+		.pm = &ch7036_pm_ops,
+	},
+	.probe          = ch7036_probe,
+	.remove         = ch7036_remove,
+	.id_table 	= ch7036_ids,
+};
+
+MODULE_AUTHOR("Francisco Jerez <currojerez@riseup.net>");
+MODULE_DESCRIPTION("Chrontel ch7036 HDMI driver");
+MODULE_LICENSE("GPL and additional rights");
+
+module_i2c_driver(ch7036_driver);
diff --git a/drivers/gpu/drm/lvds_qseven.c b/drivers/gpu/drm/lvds_qseven.c
new file mode 100644
index 0000000..09495a8
--- /dev/null
+++ b/drivers/gpu/drm/lvds_qseven.c
@@ -0,0 +1,213 @@
+/*
+ * Copyright (c) 2014-2015 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; If not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/*
+ * @file lvds-qseven.c
+ *
+ * @brief Simple driver to control the LVDS port power and backlight
+ *
+ * @ingroup MXC
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+
+struct iw_lvds_qseven {
+        int                     power_on_gpio;
+        int                     backlght_on_gpio;
+};
+
+static void backlight_ctrl (struct iw_lvds_qseven *lvds_qseven, int val)
+{
+	if (gpio_is_valid(lvds_qseven->backlght_on_gpio))
+		gpio_set_value(lvds_qseven->backlght_on_gpio, val);
+}
+
+static void power_ctrl (struct iw_lvds_qseven *lvds_qseven, int val)
+{
+	if (gpio_is_valid(lvds_qseven->power_on_gpio))
+		gpio_set_value(lvds_qseven->power_on_gpio, val);
+
+}
+
+static ssize_t lvds_qseven_backlight_ctrl(struct device *dev,
+                struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct iw_lvds_qseven *lvds_qseven = dev_get_drvdata(dev);
+        unsigned long value;
+        int ret = 0;
+
+        ret = strict_strtoul(buf, 2, &value);
+        if (ret)
+                return ret;
+
+	backlight_ctrl(lvds_qseven, value);
+
+        return count;
+}
+
+static DEVICE_ATTR(bklight_enable, S_IWUGO, NULL, lvds_qseven_backlight_ctrl);
+
+static ssize_t lvds_qseven_power_ctrl(struct device *dev,
+                struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct iw_lvds_qseven *lvds_qseven = dev_get_drvdata(dev);
+        unsigned long value;
+        int ret = 0;
+
+        ret = strict_strtoul(buf, 2, &value);
+        if (ret)
+                return ret;
+
+	power_ctrl(lvds_qseven, value);
+
+        return count;
+}
+
+static DEVICE_ATTR(pwr_enable, S_IWUGO, NULL, lvds_qseven_power_ctrl);
+
+#ifdef CONFIG_PM
+static int lvds_qseven_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct iw_lvds_qseven *lvds_qseven = dev_get_drvdata(&pdev->dev);
+
+	backlight_ctrl(lvds_qseven, 0);
+	power_ctrl(lvds_qseven, 0);
+
+	return 0;
+}
+
+static int lvds_qseven_resume(struct platform_device *pdev)
+{
+	struct iw_lvds_qseven *lvds_qseven = dev_get_drvdata(&pdev->dev);
+
+	backlight_ctrl(lvds_qseven, 1);
+	power_ctrl(lvds_qseven, 1);
+
+	return 0;
+}
+#endif
+
+/*
+ * lvds_qseven_probe - Probe method for the LVDS qseven contolling GPIOs.
+ * @np: pointer to device tree node
+ *
+ * This function probes the lvds Qseven control GPIOs in the device tree. It request GPIOs
+ * as outptu. It returns 0, if the driver registered
+ * or a negative value if there is an error.
+ */
+static int lvds_qseven_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct iw_lvds_qseven *iw_lvds_qseven;
+	int ret=0;
+
+	iw_lvds_qseven = devm_kzalloc(&pdev->dev, sizeof(*iw_lvds_qseven), GFP_KERNEL);
+	if (!iw_lvds_qseven)
+		return -ENOMEM;
+
+	/* Fetch GPIOs */
+	iw_lvds_qseven->backlght_on_gpio = of_get_named_gpio(np, "backlgt-gpios", 0);
+	if (gpio_is_valid(iw_lvds_qseven->backlght_on_gpio)) {
+		ret = devm_gpio_request_one(&pdev->dev,
+				iw_lvds_qseven->backlght_on_gpio,
+				GPIOF_OUT_INIT_HIGH,
+				"lvds bklight");
+		if (ret) {
+			dev_err(&pdev->dev, "unable to get backlight gpio\n");
+			goto err;
+		}
+	}
+
+	iw_lvds_qseven->power_on_gpio = of_get_named_gpio(np, "poweron-gpios", 0);
+	if (gpio_is_valid(iw_lvds_qseven->power_on_gpio)) {
+		ret = devm_gpio_request_one(&pdev->dev,
+				iw_lvds_qseven->power_on_gpio,
+				GPIOF_OUT_INIT_HIGH,
+				"lvds power enable");
+		if (ret) {
+			dev_err(&pdev->dev, "unable to get power-on gpio\n");
+			goto err;
+		}
+	}
+
+	platform_set_drvdata(pdev, iw_lvds_qseven);
+
+	/* Create the device attr */
+	ret = device_create_file(&pdev->dev, &dev_attr_bklight_enable);
+	if (ret < 0)
+		dev_warn(&pdev->dev,
+				"cound not create sys node for backlight state\n");
+
+	ret = device_create_file(&pdev->dev, &dev_attr_pwr_enable);
+	if (ret < 0)
+		dev_warn(&pdev->dev,
+				"cound not create sys node for power state\n");
+
+err:
+	return ret;
+}
+
+static int lvds_qseven_remove(struct platform_device *pdev)
+{
+	/* Platform not registerd return silently */
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id lvds_qseven_match[] = {
+	{.compatible = "iwave,lvds-qseven"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, lvds_qseven_match);
+#else
+#define lvds_qseven_match NULL
+#endif
+
+static struct platform_driver lvds_qseven_driver = {
+	.driver = {
+		.name   = "lvds_qseven",
+		.owner  = THIS_MODULE,
+		.of_match_table = of_match_ptr(lvds_qseven_match),
+	},
+	.probe          = lvds_qseven_probe,
+	.remove         = lvds_qseven_remove,
+        .suspend 	= lvds_qseven_suspend,
+        .resume 	= lvds_qseven_resume,
+};
+
+static int __init lvds_qseven_init(void)
+{
+	return platform_driver_register(&lvds_qseven_driver);
+}
+module_init(lvds_qseven_init);
+
+static void __exit lvds_qseven_exit(void)
+{
+	platform_driver_unregister(&lvds_qseven_driver);
+}
+module_exit(lvds_qseven_exit);
+
+MODULE_AUTHOR("iWave Systems Technologies Pvt.Ltd");
+MODULE_DESCRIPTION("iWave LVDS power and backlight Driver");
+MODULE_VERSION("0.1");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpu/drm/rcar-du/Kconfig b/drivers/gpu/drm/rcar-du/Kconfig
index 0531078..6c523eb 100644
--- a/drivers/gpu/drm/rcar-du/Kconfig
+++ b/drivers/gpu/drm/rcar-du/Kconfig
@@ -91,7 +91,7 @@ config DRM_RCAR_DU2_USE_VSPDU_CH
 	depends on DRM_RCAR_DU && DRM_RCAR_DU_CONNECT_VSP
 	help
 	  Choose this option if DU2 select to use VSPDU channel.
-	  Only R8A7790 can use DU2 connected by VSPDU1.
+	  R8A7790 and R8A7742 can use DU2 connected by VSPDU1.
 	  If you set value to 1 or 3, DU2 is connected with VSPDU1.
 	  If you set value to -1, DU2 is not connected with any VSPD.
 	  When you set value to 3 , VSPDU connection can be changed dynamically.
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
index 775a0f4..6b123fb 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
@@ -211,9 +211,15 @@ void rcar_du_crtc_route_output(struct drm_crtc *crtc,
 	 */
 	rcrtc->outputs |= BIT(output);
 
-	/* Store RGB routing to DPAD0 for R8A7790. */
+#ifdef CONFIG_MACH_IWG21M
+	/* Store LVDS routing to LVDS0 for IWG21M. */
+	if (rcar_du_has(rcdu, RCAR_DU_FEATURE_DEFR8) &&
+	    output == RCAR_DU_OUTPUT_LVDS0)
+#else
+	/* Store RGB routing to DPAD0 for R8A7790 and R8A7742. */
 	if (rcar_du_has(rcdu, RCAR_DU_FEATURE_DEFR8) &&
 	    output == RCAR_DU_OUTPUT_DPAD0)
+#endif
 		rcdu->dpad0_source = rcrtc->index;
 }
 
@@ -880,7 +886,7 @@ int rcar_du_crtc_create(struct rcar_du_group *rgrp, unsigned int index)
 #if !defined(CONFIG_DRM_ADV7511) && !defined(CONFIG_DRM_ADV7511_MODULE)
 	if ((pdata->init_conn_type) &&
 		(crtc->connector_type == DRM_MODE_CONNECTOR_HDMIA)) {
-		if (rcdu->info->chip == RCAR_H2)
+		if ((rcdu->info->chip == RCAR_H2) || (rcdu->info->chip == RZ_G1H))
 			crtc->connector_type = DRM_MODE_CONNECTOR_VGA;
 		if ((rcdu->info->chip == RCAR_M2 || rcdu->info->chip == RZ_G1M) ||
 			(rcdu->info->chip == RCAR_M2N))
@@ -892,7 +898,7 @@ int rcar_du_crtc_create(struct rcar_du_group *rgrp, unsigned int index)
 #ifndef CONFIG_DRM_RCAR_LVDS
 	if (pdata->init_conn_type) {
 		if ((crtc->connector_type == DRM_MODE_CONNECTOR_HDMIA) &&
-			(rcdu->info->chip == RCAR_H2))
+			((rcdu->info->chip == RCAR_H2) || (rcdu->info->chip == RZ_G1H)))
 			crtc->connector_type = DRM_MODE_CONNECTOR_VGA;
 		if ((crtc->connector_type == DRM_MODE_CONNECTOR_LVDS) &&
 			((rcdu->info->chip == RCAR_M2) ||
@@ -958,7 +964,7 @@ int rcar_du_crtc_create(struct rcar_du_group *rgrp, unsigned int index)
 		if (((rcdu->info->chip == RCAR_E2) || (rcdu->info->chip == RZ_G1E)) &&
 			((0x01 << vsp_ch) & BIT(1)))
 			vsp_ch = pdata->vsp = RCAR_DU_VSPD_UNUSED;
-		else if ((rcdu->info->chip == RCAR_H2) && (index == DU_CH_2) &&
+		else if (((rcdu->info->chip == RCAR_H2) || (rcdu->info->chip == RZ_G1H)) && (index == DU_CH_2) &&
 			((0x01 << vsp_ch) & BIT(0))) {
 			error = true;
 		} else if ((rcdu->vsp_reserve) & (0x01 << vsp_ch))
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.c b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
index be48fd4..1e4f01f 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
@@ -803,12 +803,85 @@ static const struct rcar_du_device_info rcar_du_r8a7743_info = {
 };
 
 
+#if defined(R8A7790_ES1_DU_LVDS_LANE_MISCONNECTION_WORKAROUND) || \
+	defined(R8A779X_ES2_DU_LVDS_CH_DATA_GAP_WORKAROUND) || \
+	defined(R8A7790_ES1_DU_ALIGN_128B_WORKAROUND)
+static struct rcar_du_device_info rcar_du_r8a7742_info = {
+#else
+static const struct rcar_du_device_info rcar_du_r8a7742_info = {
+#endif
+	.features = RCAR_DU_FEATURE_CRTC_IRQ_CLOCK | RCAR_DU_FEATURE_DEFR8 |
+		    RCAR_DU_FEATURE_VSP1_SOURCE,
+	.num_crtcs = 3,
+	.routes = {
+#ifdef CONFIG_MACH_IWG21M
+		[RCAR_DU_OUTPUT_LVDS0] = {
+                        .possible_crtcs = BIT(0),
+                        .possible_clones = 0,
+                        .encoder_type = DRM_MODE_ENCODER_LVDS,
+                },
+                [RCAR_DU_OUTPUT_LVDS1] = {
+                        .possible_crtcs = BIT(1),
+                        .possible_clones = 0,
+                        .encoder_type = DRM_MODE_ENCODER_LVDS,
+                },
+#else
+		/* R8A7790 has one RGB output, two LVDS outputs and one
+		 * (currently unsupported) TCON output.
+		 */
+		[RCAR_DU_OUTPUT_DPAD0] = {
+			.possible_crtcs = BIT(2) | BIT(1) | BIT(0),
+#if (defined(CONFIG_DRM_ADV7511) || defined(CONFIG_DRM_ADV7511_MODULE)) \
+	&& defined(CONFIG_DRM_RCAR_LVDS)
+			.possible_clones = BIT(2) | BIT(0),
+#elif defined(CONFIG_DRM_RCAR_LVDS)
+			.possible_clones = BIT(1),
+#else
+			.possible_clones = 0,
+#endif
+			.encoder_type = DRM_MODE_ENCODER_NONE,
+		},
+		[RCAR_DU_OUTPUT_LVDS0] = {
+			.possible_crtcs = BIT(0),
+			.possible_clones = 0,
+			.encoder_type = DRM_MODE_ENCODER_LVDS,
+		},
+		[RCAR_DU_OUTPUT_LVDS1] = {
+			.possible_crtcs = BIT(2) | BIT(1),
+#if defined(CONFIG_DRM_ADV7511) || defined(CONFIG_DRM_ADV7511_MODULE)
+			.possible_clones = BIT(1),
+#else
+			.possible_clones = 0,
+#endif
+			.encoder_type = DRM_MODE_ENCODER_LVDS,
+		},
+#endif
+	},
+	.num_lvds = 2,
+	.drgbs_bit = 0,
+	.max_xres = 1920,
+	.max_yres = 1080,
+	.interlace = false,
+	.lvds0_crtc = BIT(0),
+#ifdef CONFIG_MACH_IWG21M
+        .lvds1_crtc = BIT(1),
+#else
+	.lvds1_crtc = BIT(1) | BIT(2),
+#endif
+	.vspd_crtc = BIT(0) | BIT(1),
+	.chip = RCAR_H2,
+	.drgbs_use = true,
+	.vscs_use = true,
+};
+
+
 static const struct platform_device_id rcar_du_id_table[] = {
 	{ "rcar-du-r8a7779", (kernel_ulong_t)&rcar_du_r8a7779_info },
 	{ "rcar-du-r8a7790", (kernel_ulong_t)&rcar_du_r8a7790_info },
 	{ "rcar-du-r8a7791", (kernel_ulong_t)&rcar_du_r8a7791_info },
 	{ "rcar-du-r8a7793", (kernel_ulong_t)&rcar_du_r8a7793_info },
 	{ "rcar-du-r8a7794", (kernel_ulong_t)&rcar_du_r8a7794_info },
+	{ "rcar-du-r8a7742", (kernel_ulong_t)&rcar_du_r8a7742_info },
 	{ "rcar-du-r8a7743", (kernel_ulong_t)&rcar_du_r8a7743_info },
 	{ "rcar-du-r8a7745", (kernel_ulong_t)&rcar_du_r8a7745_info },
 	{ }
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.h b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
index 22a769a..ebc7f67 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
@@ -51,7 +51,8 @@ enum chip_id {
 	RCAR_M2N,
 	RCAR_E2,
 	RZ_G1E,
-	RZ_G1M
+	RZ_G1M,
+	RZ_G1H
 };
 
 /*
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_encoder.c b/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
index aff3a74..84fb75c 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
@@ -34,6 +34,11 @@
  * Common connector functions
  */
 
+#ifdef  CONFIG_MACH_IWG21M
+extern int is_adv_connected;
+#endif
+
+
 struct drm_encoder *
 rcar_du_connector_best_encoder(struct drm_connector *connector)
 {
@@ -280,7 +285,15 @@ int rcar_du_encoder_init(struct rcar_du_device *rcdu,
 		return rcar_du_lvds_connector_init(rcdu, renc,
 						&data->connector.lvds.panel);
 	case DRM_MODE_ENCODER_TMDS:
+#ifdef	CONFIG_MACH_IWG21M
+		if (!is_adv_connected)
+			/* IWG21M: If Camera Daughter Board is not connected Bypassing the HDMI connector init */
+			return 0;
+		else
+		    return rcar_du_hdmi_connector_init(rcdu, renc);
+#else
 		return rcar_du_hdmi_connector_init(rcdu, renc);
+#endif
 
 	case DRM_MODE_ENCODER_DAC:
 		return rcar_du_vga_connector_init(rcdu, renc);
